diff --git a/node_modules/@contentlayer/core/dist/generation/generate-dotpkg.js b/node_modules/@contentlayer/core/dist/generation/generate-dotpkg.js
index 0e9f9a2..58235ac 100644
--- a/node_modules/@contentlayer/core/dist/generation/generate-dotpkg.js
+++ b/node_modules/@contentlayer/core/dist/generation/generate-dotpkg.js
@@ -2,6 +2,7 @@ import { filePathJoin, fs, relative } from '@contentlayer/utils';
 import { Array, Chunk, Either, OT, pipe, S, T } from '@contentlayer/utils/effect';
 import { getContentlayerVersion } from '@contentlayer/utils/node';
 import { camelCase } from 'camel-case';
+import * as URL from "url"
 import { ArtifactsDir } from '../ArtifactsDir.js';
 import { getCwd } from '../cwd.js';
 import { SuccessCallbackError } from '../errors.js';
@@ -28,7 +29,7 @@ export const generateDotpkgStream = ({ config, verbose, isDev, }) => {
 const successCallback = (onSuccess) => {
     if (!onSuccess)
         return T.unit;
-    return pipe(getCwd, T.map((cwd) => ArtifactsDir.getDirPath({ cwd })), T.tapSync((path) => console.log('successCallback', path)), T.chain((generatedPkgPath) => T.tryCatchPromise(() => onSuccess(() => import(filePathJoin(generatedPkgPath, 'generated', 'index.mjs'))), (error) => new SuccessCallbackError({ error }))), OT.withSpan('@contentlayer/core/generation:successCallback'));
+    return pipe(getCwd, T.map((cwd) => ArtifactsDir.getDirPath({ cwd })), T.tapSync((path) => console.log('successCallback', path)), T.chain((generatedPkgPath) => T.tryCatchPromise(() => onSuccess(() => import(URL.pathToFileURL(filePathJoin(generatedPkgPath, 'generated', 'index.mjs')).href)), (error) => new SuccessCallbackError({ error }))), OT.withSpan('@contentlayer/core/generation:successCallback'));
 };
 const writeFilesForCache = ({ config, cache, schemaDef, targetPath, generationOptions, writtenFilesCache, isDev, }) => pipe(T.gen(function* ($) {
     const withPrefix = (...path_) => filePathJoin(targetPath, ...path_);
